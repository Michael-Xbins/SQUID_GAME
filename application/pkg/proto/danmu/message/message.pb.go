// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: message.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_UNDEFINED                MessageType = 0
	MessageType_OnlineNumNotify_         MessageType = 1  //在线数量变化
	MessageType_HeartBeatRequest_        MessageType = 2  //心跳请求
	MessageType_HeartBeatResponse_       MessageType = 3  //心跳返回
	MessageType_GameResultNotify_        MessageType = 4  //结算
	MessageType_TotalAmountChangeNotify_ MessageType = 5  //总金额发生变化通知
	MessageType_NumberChangeNotify_      MessageType = 6  //成交量
	MessageType_GameStageNotify_         MessageType = 7  //游戏状态切换
	MessageType_CompeteSettleDoneNotify_ MessageType = 8  //结算完成
	MessageType_SquidStageNotify_        MessageType = 9  //鱿鱼游戏状态切换
	MessageType_SquidSettleDoneNotify_   MessageType = 10 //结算完成
	MessageType_SquidJackpotNotify_      MessageType = 11
	MessageType_SquidBetInfoNotify_      MessageType = 12 //下注信息
	MessageType_SquidPriceChangeNotify_  MessageType = 13
	MessageType_SquidRoundNotify_        MessageType = 14
	MessageType_GlassStageNotify_        MessageType = 15 //玻璃桥游戏状态切换
	MessageType_GlassSettleDoneNotify_   MessageType = 16 //结算完成
	MessageType_LadderStageNotify_       MessageType = 17 //梯子游戏状态切换
	MessageType_LadderSettleDoneNotify_  MessageType = 18 //结算完成
	MessageType_LadderBetInfoNotify_     MessageType = 19 //下注信息
	MessageType_RechargeNotify_          MessageType = 20 //充值状态
	MessageType_CloseConnNotify_         MessageType = 21 //断开客户端连接
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "OnlineNumNotify_",
		2:  "HeartBeatRequest_",
		3:  "HeartBeatResponse_",
		4:  "GameResultNotify_",
		5:  "TotalAmountChangeNotify_",
		6:  "NumberChangeNotify_",
		7:  "GameStageNotify_",
		8:  "CompeteSettleDoneNotify_",
		9:  "SquidStageNotify_",
		10: "SquidSettleDoneNotify_",
		11: "SquidJackpotNotify_",
		12: "SquidBetInfoNotify_",
		13: "SquidPriceChangeNotify_",
		14: "SquidRoundNotify_",
		15: "GlassStageNotify_",
		16: "GlassSettleDoneNotify_",
		17: "LadderStageNotify_",
		18: "LadderSettleDoneNotify_",
		19: "LadderBetInfoNotify_",
		20: "RechargeNotify_",
		21: "CloseConnNotify_",
	}
	MessageType_value = map[string]int32{
		"UNDEFINED":                0,
		"OnlineNumNotify_":         1,
		"HeartBeatRequest_":        2,
		"HeartBeatResponse_":       3,
		"GameResultNotify_":        4,
		"TotalAmountChangeNotify_": 5,
		"NumberChangeNotify_":      6,
		"GameStageNotify_":         7,
		"CompeteSettleDoneNotify_": 8,
		"SquidStageNotify_":        9,
		"SquidSettleDoneNotify_":   10,
		"SquidJackpotNotify_":      11,
		"SquidBetInfoNotify_":      12,
		"SquidPriceChangeNotify_":  13,
		"SquidRoundNotify_":        14,
		"GlassStageNotify_":        15,
		"GlassSettleDoneNotify_":   16,
		"LadderStageNotify_":       17,
		"LadderSettleDoneNotify_":  18,
		"LadderBetInfoNotify_":     19,
		"RechargeNotify_":          20,
		"CloseConnNotify_":         21,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type SquidBetInfoEnumType int32

const (
	SquidBetInfoEnumType_OrderType      SquidBetInfoEnumType = 0
	SquidBetInfoEnumType_CancelType     SquidBetInfoEnumType = 1
	SquidBetInfoEnumType_SwitchType     SquidBetInfoEnumType = 2
	SquidBetInfoEnumType_RobotOrderType SquidBetInfoEnumType = 3
)

// Enum value maps for SquidBetInfoEnumType.
var (
	SquidBetInfoEnumType_name = map[int32]string{
		0: "OrderType",
		1: "CancelType",
		2: "SwitchType",
		3: "RobotOrderType",
	}
	SquidBetInfoEnumType_value = map[string]int32{
		"OrderType":      0,
		"CancelType":     1,
		"SwitchType":     2,
		"RobotOrderType": 3,
	}
)

func (x SquidBetInfoEnumType) Enum() *SquidBetInfoEnumType {
	p := new(SquidBetInfoEnumType)
	*p = x
	return p
}

func (x SquidBetInfoEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SquidBetInfoEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (SquidBetInfoEnumType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x SquidBetInfoEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SquidBetInfoEnumType.Descriptor instead.
func (SquidBetInfoEnumType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=message.MessageType" json:"type,omitempty"`
	// Types that are assignable to Message:
	//
	//	*ClientRequest_HeartBeatRequest
	Message isClientRequest_Message `protobuf_oneof:"message"`
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *ClientRequest) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_UNDEFINED
}

func (m *ClientRequest) GetMessage() isClientRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ClientRequest) GetHeartBeatRequest() *HeartBeatRequest {
	if x, ok := x.GetMessage().(*ClientRequest_HeartBeatRequest); ok {
		return x.HeartBeatRequest
	}
	return nil
}

type isClientRequest_Message interface {
	isClientRequest_Message()
}

type ClientRequest_HeartBeatRequest struct {
	HeartBeatRequest *HeartBeatRequest `protobuf:"bytes,1,opt,name=heartBeatRequest,proto3,oneof"`
}

func (*ClientRequest_HeartBeatRequest) isClientRequest_Message() {}

type ClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=message.MessageType" json:"type,omitempty"`
	// Types that are assignable to Message:
	//
	//	*ClientResponse_OnlineNumNotify
	//	*ClientResponse_HeartBeatResponse
	//	*ClientResponse_GameResultNotify
	//	*ClientResponse_TotalAmountChangeNotify
	//	*ClientResponse_NumberChangeNotify
	//	*ClientResponse_GameStageNotify
	//	*ClientResponse_CompeteSettleDoneNotify
	//	*ClientResponse_SquidStageNotify
	//	*ClientResponse_SquidSettleDoneNotify
	//	*ClientResponse_SquidJackpotNotify
	//	*ClientResponse_SquidBetInfoNotify
	//	*ClientResponse_SquidPriceChangeNotify
	//	*ClientResponse_SquidRoundNotify
	//	*ClientResponse_GlassStageNotify
	//	*ClientResponse_GlassSettleDoneNotify
	//	*ClientResponse_LadderStageNotify
	//	*ClientResponse_LadderSettleDoneNotify
	//	*ClientResponse_LadderBetInfoNotify
	//	*ClientResponse_RechargeNotify
	//	*ClientResponse_CloseConnNotify
	Message isClientResponse_Message `protobuf_oneof:"message"`
}

func (x *ClientResponse) Reset() {
	*x = ClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponse) ProtoMessage() {}

func (x *ClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponse.ProtoReflect.Descriptor instead.
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *ClientResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClientResponse) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_UNDEFINED
}

func (m *ClientResponse) GetMessage() isClientResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ClientResponse) GetOnlineNumNotify() *OnlineNumNotify {
	if x, ok := x.GetMessage().(*ClientResponse_OnlineNumNotify); ok {
		return x.OnlineNumNotify
	}
	return nil
}

func (x *ClientResponse) GetHeartBeatResponse() *HeartBeatResponse {
	if x, ok := x.GetMessage().(*ClientResponse_HeartBeatResponse); ok {
		return x.HeartBeatResponse
	}
	return nil
}

func (x *ClientResponse) GetGameResultNotify() *GameResultNotify {
	if x, ok := x.GetMessage().(*ClientResponse_GameResultNotify); ok {
		return x.GameResultNotify
	}
	return nil
}

func (x *ClientResponse) GetTotalAmountChangeNotify() *TotalAmountChangeNotify {
	if x, ok := x.GetMessage().(*ClientResponse_TotalAmountChangeNotify); ok {
		return x.TotalAmountChangeNotify
	}
	return nil
}

func (x *ClientResponse) GetNumberChangeNotify() *NumberChangeNotify {
	if x, ok := x.GetMessage().(*ClientResponse_NumberChangeNotify); ok {
		return x.NumberChangeNotify
	}
	return nil
}

func (x *ClientResponse) GetGameStageNotify() *GameStageNotify {
	if x, ok := x.GetMessage().(*ClientResponse_GameStageNotify); ok {
		return x.GameStageNotify
	}
	return nil
}

func (x *ClientResponse) GetCompeteSettleDoneNotify() *CompeteSettleDoneNotify {
	if x, ok := x.GetMessage().(*ClientResponse_CompeteSettleDoneNotify); ok {
		return x.CompeteSettleDoneNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidStageNotify() *SquidStageNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidStageNotify); ok {
		return x.SquidStageNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidSettleDoneNotify() *SquidSettleDoneNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidSettleDoneNotify); ok {
		return x.SquidSettleDoneNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidJackpotNotify() *SquidJackpotNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidJackpotNotify); ok {
		return x.SquidJackpotNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidBetInfoNotify() *SquidBetInfoNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidBetInfoNotify); ok {
		return x.SquidBetInfoNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidPriceChangeNotify() *SquidPriceChangeNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidPriceChangeNotify); ok {
		return x.SquidPriceChangeNotify
	}
	return nil
}

func (x *ClientResponse) GetSquidRoundNotify() *SquidRoundNotify {
	if x, ok := x.GetMessage().(*ClientResponse_SquidRoundNotify); ok {
		return x.SquidRoundNotify
	}
	return nil
}

func (x *ClientResponse) GetGlassStageNotify() *GlassStageNotify {
	if x, ok := x.GetMessage().(*ClientResponse_GlassStageNotify); ok {
		return x.GlassStageNotify
	}
	return nil
}

func (x *ClientResponse) GetGlassSettleDoneNotify() *GlassSettleDoneNotify {
	if x, ok := x.GetMessage().(*ClientResponse_GlassSettleDoneNotify); ok {
		return x.GlassSettleDoneNotify
	}
	return nil
}

func (x *ClientResponse) GetLadderStageNotify() *LadderStageNotify {
	if x, ok := x.GetMessage().(*ClientResponse_LadderStageNotify); ok {
		return x.LadderStageNotify
	}
	return nil
}

func (x *ClientResponse) GetLadderSettleDoneNotify() *LadderSettleDoneNotify {
	if x, ok := x.GetMessage().(*ClientResponse_LadderSettleDoneNotify); ok {
		return x.LadderSettleDoneNotify
	}
	return nil
}

func (x *ClientResponse) GetLadderBetInfoNotify() *LadderBetInfoNotify {
	if x, ok := x.GetMessage().(*ClientResponse_LadderBetInfoNotify); ok {
		return x.LadderBetInfoNotify
	}
	return nil
}

func (x *ClientResponse) GetRechargeNotify() *RechargeNotify {
	if x, ok := x.GetMessage().(*ClientResponse_RechargeNotify); ok {
		return x.RechargeNotify
	}
	return nil
}

func (x *ClientResponse) GetCloseConnNotify() *CloseConnNotify {
	if x, ok := x.GetMessage().(*ClientResponse_CloseConnNotify); ok {
		return x.CloseConnNotify
	}
	return nil
}

type isClientResponse_Message interface {
	isClientResponse_Message()
}

type ClientResponse_OnlineNumNotify struct {
	OnlineNumNotify *OnlineNumNotify `protobuf:"bytes,3,opt,name=onlineNumNotify,proto3,oneof"`
}

type ClientResponse_HeartBeatResponse struct {
	HeartBeatResponse *HeartBeatResponse `protobuf:"bytes,4,opt,name=heartBeatResponse,proto3,oneof"`
}

type ClientResponse_GameResultNotify struct {
	GameResultNotify *GameResultNotify `protobuf:"bytes,5,opt,name=gameResultNotify,proto3,oneof"`
}

type ClientResponse_TotalAmountChangeNotify struct {
	TotalAmountChangeNotify *TotalAmountChangeNotify `protobuf:"bytes,6,opt,name=totalAmountChangeNotify,proto3,oneof"`
}

type ClientResponse_NumberChangeNotify struct {
	NumberChangeNotify *NumberChangeNotify `protobuf:"bytes,7,opt,name=numberChangeNotify,proto3,oneof"`
}

type ClientResponse_GameStageNotify struct {
	GameStageNotify *GameStageNotify `protobuf:"bytes,8,opt,name=gameStageNotify,proto3,oneof"`
}

type ClientResponse_CompeteSettleDoneNotify struct {
	CompeteSettleDoneNotify *CompeteSettleDoneNotify `protobuf:"bytes,9,opt,name=competeSettleDoneNotify,proto3,oneof"`
}

type ClientResponse_SquidStageNotify struct {
	SquidStageNotify *SquidStageNotify `protobuf:"bytes,10,opt,name=squidStageNotify,proto3,oneof"`
}

type ClientResponse_SquidSettleDoneNotify struct {
	SquidSettleDoneNotify *SquidSettleDoneNotify `protobuf:"bytes,11,opt,name=squidSettleDoneNotify,proto3,oneof"`
}

type ClientResponse_SquidJackpotNotify struct {
	SquidJackpotNotify *SquidJackpotNotify `protobuf:"bytes,12,opt,name=squidJackpotNotify,proto3,oneof"`
}

type ClientResponse_SquidBetInfoNotify struct {
	SquidBetInfoNotify *SquidBetInfoNotify `protobuf:"bytes,13,opt,name=squidBetInfoNotify,proto3,oneof"`
}

type ClientResponse_SquidPriceChangeNotify struct {
	SquidPriceChangeNotify *SquidPriceChangeNotify `protobuf:"bytes,14,opt,name=squidPriceChangeNotify,proto3,oneof"`
}

type ClientResponse_SquidRoundNotify struct {
	SquidRoundNotify *SquidRoundNotify `protobuf:"bytes,15,opt,name=squidRoundNotify,proto3,oneof"`
}

type ClientResponse_GlassStageNotify struct {
	GlassStageNotify *GlassStageNotify `protobuf:"bytes,16,opt,name=glassStageNotify,proto3,oneof"`
}

type ClientResponse_GlassSettleDoneNotify struct {
	GlassSettleDoneNotify *GlassSettleDoneNotify `protobuf:"bytes,17,opt,name=glassSettleDoneNotify,proto3,oneof"`
}

type ClientResponse_LadderStageNotify struct {
	LadderStageNotify *LadderStageNotify `protobuf:"bytes,18,opt,name=ladderStageNotify,proto3,oneof"`
}

type ClientResponse_LadderSettleDoneNotify struct {
	LadderSettleDoneNotify *LadderSettleDoneNotify `protobuf:"bytes,19,opt,name=ladderSettleDoneNotify,proto3,oneof"`
}

type ClientResponse_LadderBetInfoNotify struct {
	LadderBetInfoNotify *LadderBetInfoNotify `protobuf:"bytes,20,opt,name=ladderBetInfoNotify,proto3,oneof"`
}

type ClientResponse_RechargeNotify struct {
	RechargeNotify *RechargeNotify `protobuf:"bytes,21,opt,name=rechargeNotify,proto3,oneof"`
}

type ClientResponse_CloseConnNotify struct {
	CloseConnNotify *CloseConnNotify `protobuf:"bytes,22,opt,name=closeConnNotify,proto3,oneof"`
}

func (*ClientResponse_OnlineNumNotify) isClientResponse_Message() {}

func (*ClientResponse_HeartBeatResponse) isClientResponse_Message() {}

func (*ClientResponse_GameResultNotify) isClientResponse_Message() {}

func (*ClientResponse_TotalAmountChangeNotify) isClientResponse_Message() {}

func (*ClientResponse_NumberChangeNotify) isClientResponse_Message() {}

func (*ClientResponse_GameStageNotify) isClientResponse_Message() {}

func (*ClientResponse_CompeteSettleDoneNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidStageNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidSettleDoneNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidJackpotNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidBetInfoNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidPriceChangeNotify) isClientResponse_Message() {}

func (*ClientResponse_SquidRoundNotify) isClientResponse_Message() {}

func (*ClientResponse_GlassStageNotify) isClientResponse_Message() {}

func (*ClientResponse_GlassSettleDoneNotify) isClientResponse_Message() {}

func (*ClientResponse_LadderStageNotify) isClientResponse_Message() {}

func (*ClientResponse_LadderSettleDoneNotify) isClientResponse_Message() {}

func (*ClientResponse_LadderBetInfoNotify) isClientResponse_Message() {}

func (*ClientResponse_RechargeNotify) isClientResponse_Message() {}

func (*ClientResponse_CloseConnNotify) isClientResponse_Message() {}

type OnlineNumNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OnlineNumNotify) Reset() {
	*x = OnlineNumNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineNumNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineNumNotify) ProtoMessage() {}

func (x *OnlineNumNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineNumNotify.ProtoReflect.Descriptor instead.
func (*OnlineNumNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *OnlineNumNotify) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type HeartBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartBeatRequest) Reset() {
	*x = HeartBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatRequest) ProtoMessage() {}

func (x *HeartBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatRequest.ProtoReflect.Descriptor instead.
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type HeartBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartBeatResponse) Reset() {
	*x = HeartBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResponse) ProtoMessage() {}

func (x *HeartBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResponse.ProtoReflect.Descriptor instead.
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type GameStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage     int32 `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"` //0:开盘 1:封盘 2:结算
	Countdown int64 `protobuf:"varint,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GameStageNotify) Reset() {
	*x = GameStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStageNotify) ProtoMessage() {}

func (x *GameStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStageNotify.ProtoReflect.Descriptor instead.
func (*GameStageNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *GameStageNotify) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *GameStageNotify) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *GameStageNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TotalAmountChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAmounts map[string]int64 `protobuf:"bytes,1,rep,name=totalAmounts,proto3" json:"totalAmounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //k:up|down v:金额
	Type         string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                                                                          //下注类型
	Account      string           `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`                                                                                                    //账号
}

func (x *TotalAmountChangeNotify) Reset() {
	*x = TotalAmountChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalAmountChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalAmountChangeNotify) ProtoMessage() {}

func (x *TotalAmountChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalAmountChangeNotify.ProtoReflect.Descriptor instead.
func (*TotalAmountChangeNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *TotalAmountChangeNotify) GetTotalAmounts() map[string]int64 {
	if x != nil {
		return x.TotalAmounts
	}
	return nil
}

func (x *TotalAmountChangeNotify) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TotalAmountChangeNotify) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type NumberChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       float64 `protobuf:"fixed64,1,opt,name=num,proto3" json:"num,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NumberChangeNotify) Reset() {
	*x = NumberChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberChangeNotify) ProtoMessage() {}

func (x *NumberChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberChangeNotify.ProtoReflect.Descriptor instead.
func (*NumberChangeNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *NumberChangeNotify) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *NumberChangeNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GameResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 countdown = 1;//倒计时毫秒
	WinColor string `protobuf:"bytes,1,opt,name=winColor,proto3" json:"winColor,omitempty"` //a|peace|b
	NumA     int32  `protobuf:"varint,2,opt,name=numA,proto3" json:"numA,omitempty"`        //0|1|2|..|9
	NumB     int32  `protobuf:"varint,3,opt,name=numB,proto3" json:"numB,omitempty"`        //0|1|2|..|9
}

func (x *GameResultNotify) Reset() {
	*x = GameResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResultNotify) ProtoMessage() {}

func (x *GameResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResultNotify.ProtoReflect.Descriptor instead.
func (*GameResultNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *GameResultNotify) GetWinColor() string {
	if x != nil {
		return x.WinColor
	}
	return ""
}

func (x *GameResultNotify) GetNumA() int32 {
	if x != nil {
		return x.NumA
	}
	return 0
}

func (x *GameResultNotify) GetNumB() int32 {
	if x != nil {
		return x.NumB
	}
	return 0
}

type CompeteSettleDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"` //玩家当前余额
}

func (x *CompeteSettleDoneNotify) Reset() {
	*x = CompeteSettleDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompeteSettleDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompeteSettleDoneNotify) ProtoMessage() {}

func (x *CompeteSettleDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompeteSettleDoneNotify.ProtoReflect.Descriptor instead.
func (*CompeteSettleDoneNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *CompeteSettleDoneNotify) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SquidStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage      int32   `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"` //0:开盘 1:封盘 2:结算
	Countdown  int64   `protobuf:"varint,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Timestamp  int64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransPrice float64 `protobuf:"fixed64,4,opt,name=transPrice,proto3" json:"transPrice,omitempty"`
	DeadTrack  int32   `protobuf:"varint,5,opt,name=deadTrack,proto3" json:"deadTrack,omitempty"` //本次死亡赛道(仅封盘和结算)
}

func (x *SquidStageNotify) Reset() {
	*x = SquidStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidStageNotify) ProtoMessage() {}

func (x *SquidStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidStageNotify.ProtoReflect.Descriptor instead.
func (*SquidStageNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *SquidStageNotify) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *SquidStageNotify) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *SquidStageNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SquidStageNotify) GetTransPrice() float64 {
	if x != nil {
		return x.TransPrice
	}
	return 0
}

func (x *SquidStageNotify) GetDeadTrack() int32 {
	if x != nil {
		return x.DeadTrack
	}
	return 0
}

type SquidSettleDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeadTrack         int32   `protobuf:"varint,1,opt,name=deadTrack,proto3" json:"deadTrack,omitempty"`    //本次死亡赛道
	TransPrice        float64 `protobuf:"fixed64,2,opt,name=transPrice,proto3" json:"transPrice,omitempty"` //交易价
	Bets              int64   `protobuf:"varint,3,opt,name=bets,proto3" json:"bets,omitempty"`              //本轮下注总额
	Odds              float64 `protobuf:"fixed64,4,opt,name=odds,proto3" json:"odds,omitempty"`             //赔率
	Bonus             int64   `protobuf:"varint,5,opt,name=bonus,proto3" json:"bonus,omitempty"`            //本轮奖金
	JackpotWeightRate float64 `protobuf:"fixed64,6,opt,name=jackpotWeightRate,proto3" json:"jackpotWeightRate,omitempty"`
	NextRoundId       int32   `protobuf:"varint,7,opt,name=nextRoundId,proto3" json:"nextRoundId,omitempty"`
	Balance           int64   `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"` //余额
}

func (x *SquidSettleDoneNotify) Reset() {
	*x = SquidSettleDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidSettleDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidSettleDoneNotify) ProtoMessage() {}

func (x *SquidSettleDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidSettleDoneNotify.ProtoReflect.Descriptor instead.
func (*SquidSettleDoneNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *SquidSettleDoneNotify) GetDeadTrack() int32 {
	if x != nil {
		return x.DeadTrack
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetTransPrice() float64 {
	if x != nil {
		return x.TransPrice
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetBets() int64 {
	if x != nil {
		return x.Bets
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetBonus() int64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetJackpotWeightRate() float64 {
	if x != nil {
		return x.JackpotWeightRate
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetNextRoundId() int32 {
	if x != nil {
		return x.NextRoundId
	}
	return 0
}

func (x *SquidSettleDoneNotify) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SquidJackpotNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstPass int64 `protobuf:"varint,1,opt,name=firstPass,proto3" json:"firstPass,omitempty"`
	Jackpot   int64 `protobuf:"varint,2,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
}

func (x *SquidJackpotNotify) Reset() {
	*x = SquidJackpotNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidJackpotNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidJackpotNotify) ProtoMessage() {}

func (x *SquidJackpotNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidJackpotNotify.ProtoReflect.Descriptor instead.
func (*SquidJackpotNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *SquidJackpotNotify) GetFirstPass() int64 {
	if x != nil {
		return x.FirstPass
	}
	return 0
}

func (x *SquidJackpotNotify) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

type SquidBetInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId int32                `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Type    SquidBetInfoEnumType `protobuf:"varint,2,opt,name=type,proto3,enum=message.SquidBetInfoEnumType" json:"type,omitempty"`
	Track   []*Track             `protobuf:"bytes,3,rep,name=track,proto3" json:"track,omitempty"`
}

func (x *SquidBetInfoNotify) Reset() {
	*x = SquidBetInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidBetInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidBetInfoNotify) ProtoMessage() {}

func (x *SquidBetInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidBetInfoNotify.ProtoReflect.Descriptor instead.
func (*SquidBetInfoNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *SquidBetInfoNotify) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *SquidBetInfoNotify) GetType() SquidBetInfoEnumType {
	if x != nil {
		return x.Type
	}
	return SquidBetInfoEnumType_OrderType
}

func (x *SquidBetInfoNotify) GetTrack() []*Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId int32 `protobuf:"varint,1,opt,name=trackId,proto3" json:"trackId,omitempty"` //赛道ID
	Players int32 `protobuf:"varint,2,opt,name=players,proto3" json:"players,omitempty"` //赛道人数
	Bets    int64 `protobuf:"varint,3,opt,name=bets,proto3" json:"bets,omitempty"`       //赛道投注总额
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *Track) GetTrackId() int32 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

func (x *Track) GetPlayers() int32 {
	if x != nil {
		return x.Players
	}
	return 0
}

func (x *Track) GetBets() int64 {
	if x != nil {
		return x.Bets
	}
	return 0
}

type SquidPriceChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       float64 `protobuf:"fixed64,1,opt,name=num,proto3" json:"num,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SquidPriceChangeNotify) Reset() {
	*x = SquidPriceChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidPriceChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidPriceChangeNotify) ProtoMessage() {}

func (x *SquidPriceChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidPriceChangeNotify.ProtoReflect.Descriptor instead.
func (*SquidPriceChangeNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *SquidPriceChangeNotify) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SquidPriceChangeNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SquidRoundNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds       []*Round `protobuf:"bytes,1,rep,name=rounds,proto3" json:"rounds,omitempty"`
	TotalJackpot int64    `protobuf:"varint,2,opt,name=totalJackpot,proto3" json:"totalJackpot,omitempty"`
}

func (x *SquidRoundNotify) Reset() {
	*x = SquidRoundNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquidRoundNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquidRoundNotify) ProtoMessage() {}

func (x *SquidRoundNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquidRoundNotify.ProtoReflect.Descriptor instead.
func (*SquidRoundNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *SquidRoundNotify) GetRounds() []*Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *SquidRoundNotify) GetTotalJackpot() int64 {
	if x != nil {
		return x.TotalJackpot
	}
	return 0
}

type Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId  int32   `protobuf:"varint,1,opt,name=roundId,proto3" json:"roundId,omitempty"`   //轮次ID
	Odds     float64 `protobuf:"fixed64,2,opt,name=odds,proto3" json:"odds,omitempty"`        //赔率
	TotalBet int64   `protobuf:"varint,3,opt,name=totalBet,proto3" json:"totalBet,omitempty"` //本轮总注额
	DeadBet  int64   `protobuf:"varint,4,opt,name=deadBet,proto3" json:"deadBet,omitempty"`   //本轮死亡注额
}

func (x *Round) Reset() {
	*x = Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *Round) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *Round) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *Round) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *Round) GetDeadBet() int64 {
	if x != nil {
		return x.DeadBet
	}
	return 0
}

type GlassStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage     int32  `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`       //0:开盘 1:封盘 2:结算
	RoundNum  int64  `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"` //期数
	Countdown int64  `protobuf:"varint,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransHash string `protobuf:"bytes,5,opt,name=transHash,proto3" json:"transHash,omitempty"`
}

func (x *GlassStageNotify) Reset() {
	*x = GlassStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlassStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlassStageNotify) ProtoMessage() {}

func (x *GlassStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlassStageNotify.ProtoReflect.Descriptor instead.
func (*GlassStageNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *GlassStageNotify) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *GlassStageNotify) GetRoundNum() int64 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *GlassStageNotify) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *GlassStageNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GlassStageNotify) GetTransHash() string {
	if x != nil {
		return x.TransHash
	}
	return ""
}

type GlassSettleDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum int64    `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"` //期数
	Orders   []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	Balance  int64    `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"` //余额
}

func (x *GlassSettleDoneNotify) Reset() {
	*x = GlassSettleDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlassSettleDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlassSettleDoneNotify) ProtoMessage() {}

func (x *GlassSettleDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlassSettleDoneNotify.ProtoReflect.Descriptor instead.
func (*GlassSettleDoneNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *GlassSettleDoneNotify) GetRoundNum() int64 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *GlassSettleDoneNotify) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *GlassSettleDoneNotify) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string  `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	IsWin   bool    `protobuf:"varint,2,opt,name=isWin,proto3" json:"isWin,omitempty"`
	Odds    float64 `protobuf:"fixed64,3,opt,name=odds,proto3" json:"odds,omitempty"`   //赔率
	Bonus   float64 `protobuf:"fixed64,4,opt,name=bonus,proto3" json:"bonus,omitempty"` //奖金
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *Order) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *Order) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

type LadderStageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage     int32            `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`       //0:开盘 1:封盘 2:结算
	RoundNum  int64            `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"` //期数
	Countdown int64            `protobuf:"varint,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Timestamp int64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransHash string           `protobuf:"bytes,5,opt,name=transHash,proto3" json:"transHash,omitempty"`
	Bets      map[string]int64 `protobuf:"bytes,6,rep,name=bets,proto3" json:"bets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 仅封盘和结算传
}

func (x *LadderStageNotify) Reset() {
	*x = LadderStageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderStageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderStageNotify) ProtoMessage() {}

func (x *LadderStageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderStageNotify.ProtoReflect.Descriptor instead.
func (*LadderStageNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (x *LadderStageNotify) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *LadderStageNotify) GetRoundNum() int64 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *LadderStageNotify) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *LadderStageNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LadderStageNotify) GetTransHash() string {
	if x != nil {
		return x.TransHash
	}
	return ""
}

func (x *LadderStageNotify) GetBets() map[string]int64 {
	if x != nil {
		return x.Bets
	}
	return nil
}

type LadderSettleDoneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum int64    `protobuf:"varint,1,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"` //期数
	Orders   []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
	Balance  int64    `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"` //余额
}

func (x *LadderSettleDoneNotify) Reset() {
	*x = LadderSettleDoneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderSettleDoneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderSettleDoneNotify) ProtoMessage() {}

func (x *LadderSettleDoneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderSettleDoneNotify.ProtoReflect.Descriptor instead.
func (*LadderSettleDoneNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{22}
}

func (x *LadderSettleDoneNotify) GetRoundNum() int64 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *LadderSettleDoneNotify) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *LadderSettleDoneNotify) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type LadderBetInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets map[string]int64 `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // betId 和对应的下注总额
}

func (x *LadderBetInfoNotify) Reset() {
	*x = LadderBetInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LadderBetInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LadderBetInfoNotify) ProtoMessage() {}

func (x *LadderBetInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LadderBetInfoNotify.ProtoReflect.Descriptor instead.
func (*LadderBetInfoNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{23}
}

func (x *LadderBetInfoNotify) GetBets() map[string]int64 {
	if x != nil {
		return x.Bets
	}
	return nil
}

type RechargeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`  //充值地址
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"` //当前游戏币余额
	Usdt    int64  `protobuf:"varint,3,opt,name=usdt,proto3" json:"usdt,omitempty"`
	Voucher int64  `protobuf:"varint,4,opt,name=voucher,proto3" json:"voucher,omitempty"`
}

func (x *RechargeNotify) Reset() {
	*x = RechargeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeNotify) ProtoMessage() {}

func (x *RechargeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeNotify.ProtoReflect.Descriptor instead.
func (*RechargeNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{24}
}

func (x *RechargeNotify) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RechargeNotify) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RechargeNotify) GetUsdt() int64 {
	if x != nil {
		return x.Usdt
	}
	return 0
}

func (x *RechargeNotify) GetVoucher() int64 {
	if x != nil {
		return x.Voucher
	}
	return 0
}

type CloseConnNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseConnNotify) Reset() {
	*x = CloseConnNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseConnNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnNotify) ProtoMessage() {}

func (x *CloseConnNotify) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseConnNotify.ProtoReflect.Descriptor instead.
func (*CloseConnNotify) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{25}
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x0d, 0x0a, 0x0e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x5c, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4d,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x44, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x5c, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x56, 0x0a, 0x15, 0x73, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x71, 0x75, 0x69, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69, 0x64, 0x4a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x71, 0x75, 0x69, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x71, 0x75, 0x69, 0x64, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69, 0x64, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71,
	0x75, 0x69, 0x64, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x59, 0x0a, 0x16, 0x73, 0x71, 0x75, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x75, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x73,
	0x71, 0x75, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x71, 0x75, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x75, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x10, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x56, 0x0a,
	0x15, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x15,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x11,
	0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x50, 0x0a, 0x13,
	0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x41,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x13, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x56, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x12,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x75, 0x6d, 0x41, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x42, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x42, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x10, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x22, 0xfd, 0x01, 0x0a, 0x15, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x71, 0x75, 0x69, 0x64, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x53, 0x71, 0x75, 0x69, 0x64, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x71, 0x75, 0x69,
	0x64, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x05,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0x48, 0x0a,
	0x16, 0x53, 0x71, 0x75, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x71, 0x75, 0x69, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x22, 0x6b, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x61, 0x64, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x61,
	0x64, 0x42, 0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x22,
	0x92, 0x02, 0x0a, 0x11, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x42, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x42,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x16, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x13, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x42, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x73, 0x64, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x11, 0x0a,
	0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2a, 0xa9, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x75,
	0x69, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x75, 0x69, 0x64, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x71, 0x75, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x75, 0x69,
	0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x0e, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10,
	0x13, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x10, 0x15, 0x2a, 0x59, 0x0a, 0x14,
	0x53, 0x71, 0x75, 0x69, 0x64, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x42, 0x0c, 0x50, 0x01, 0x5a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_message_proto_goTypes = []any{
	(MessageType)(0),                // 0: message.MessageType
	(SquidBetInfoEnumType)(0),       // 1: message.SquidBetInfoEnumType
	(*ClientRequest)(nil),           // 2: message.ClientRequest
	(*ClientResponse)(nil),          // 3: message.ClientResponse
	(*OnlineNumNotify)(nil),         // 4: message.OnlineNumNotify
	(*HeartBeatRequest)(nil),        // 5: message.HeartBeatRequest
	(*HeartBeatResponse)(nil),       // 6: message.HeartBeatResponse
	(*GameStageNotify)(nil),         // 7: message.GameStageNotify
	(*TotalAmountChangeNotify)(nil), // 8: message.TotalAmountChangeNotify
	(*NumberChangeNotify)(nil),      // 9: message.NumberChangeNotify
	(*GameResultNotify)(nil),        // 10: message.GameResultNotify
	(*CompeteSettleDoneNotify)(nil), // 11: message.CompeteSettleDoneNotify
	(*SquidStageNotify)(nil),        // 12: message.SquidStageNotify
	(*SquidSettleDoneNotify)(nil),   // 13: message.SquidSettleDoneNotify
	(*SquidJackpotNotify)(nil),      // 14: message.SquidJackpotNotify
	(*SquidBetInfoNotify)(nil),      // 15: message.SquidBetInfoNotify
	(*Track)(nil),                   // 16: message.Track
	(*SquidPriceChangeNotify)(nil),  // 17: message.SquidPriceChangeNotify
	(*SquidRoundNotify)(nil),        // 18: message.SquidRoundNotify
	(*Round)(nil),                   // 19: message.Round
	(*GlassStageNotify)(nil),        // 20: message.GlassStageNotify
	(*GlassSettleDoneNotify)(nil),   // 21: message.GlassSettleDoneNotify
	(*Order)(nil),                   // 22: message.Order
	(*LadderStageNotify)(nil),       // 23: message.LadderStageNotify
	(*LadderSettleDoneNotify)(nil),  // 24: message.LadderSettleDoneNotify
	(*LadderBetInfoNotify)(nil),     // 25: message.LadderBetInfoNotify
	(*RechargeNotify)(nil),          // 26: message.RechargeNotify
	(*CloseConnNotify)(nil),         // 27: message.CloseConnNotify
	nil,                             // 28: message.TotalAmountChangeNotify.TotalAmountsEntry
	nil,                             // 29: message.LadderStageNotify.BetsEntry
	nil,                             // 30: message.LadderBetInfoNotify.BetsEntry
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: message.ClientRequest.type:type_name -> message.MessageType
	5,  // 1: message.ClientRequest.heartBeatRequest:type_name -> message.HeartBeatRequest
	0,  // 2: message.ClientResponse.type:type_name -> message.MessageType
	4,  // 3: message.ClientResponse.onlineNumNotify:type_name -> message.OnlineNumNotify
	6,  // 4: message.ClientResponse.heartBeatResponse:type_name -> message.HeartBeatResponse
	10, // 5: message.ClientResponse.gameResultNotify:type_name -> message.GameResultNotify
	8,  // 6: message.ClientResponse.totalAmountChangeNotify:type_name -> message.TotalAmountChangeNotify
	9,  // 7: message.ClientResponse.numberChangeNotify:type_name -> message.NumberChangeNotify
	7,  // 8: message.ClientResponse.gameStageNotify:type_name -> message.GameStageNotify
	11, // 9: message.ClientResponse.competeSettleDoneNotify:type_name -> message.CompeteSettleDoneNotify
	12, // 10: message.ClientResponse.squidStageNotify:type_name -> message.SquidStageNotify
	13, // 11: message.ClientResponse.squidSettleDoneNotify:type_name -> message.SquidSettleDoneNotify
	14, // 12: message.ClientResponse.squidJackpotNotify:type_name -> message.SquidJackpotNotify
	15, // 13: message.ClientResponse.squidBetInfoNotify:type_name -> message.SquidBetInfoNotify
	17, // 14: message.ClientResponse.squidPriceChangeNotify:type_name -> message.SquidPriceChangeNotify
	18, // 15: message.ClientResponse.squidRoundNotify:type_name -> message.SquidRoundNotify
	20, // 16: message.ClientResponse.glassStageNotify:type_name -> message.GlassStageNotify
	21, // 17: message.ClientResponse.glassSettleDoneNotify:type_name -> message.GlassSettleDoneNotify
	23, // 18: message.ClientResponse.ladderStageNotify:type_name -> message.LadderStageNotify
	24, // 19: message.ClientResponse.ladderSettleDoneNotify:type_name -> message.LadderSettleDoneNotify
	25, // 20: message.ClientResponse.ladderBetInfoNotify:type_name -> message.LadderBetInfoNotify
	26, // 21: message.ClientResponse.rechargeNotify:type_name -> message.RechargeNotify
	27, // 22: message.ClientResponse.closeConnNotify:type_name -> message.CloseConnNotify
	28, // 23: message.TotalAmountChangeNotify.totalAmounts:type_name -> message.TotalAmountChangeNotify.TotalAmountsEntry
	1,  // 24: message.SquidBetInfoNotify.type:type_name -> message.SquidBetInfoEnumType
	16, // 25: message.SquidBetInfoNotify.track:type_name -> message.Track
	19, // 26: message.SquidRoundNotify.rounds:type_name -> message.Round
	22, // 27: message.GlassSettleDoneNotify.orders:type_name -> message.Order
	29, // 28: message.LadderStageNotify.bets:type_name -> message.LadderStageNotify.BetsEntry
	22, // 29: message.LadderSettleDoneNotify.orders:type_name -> message.Order
	30, // 30: message.LadderBetInfoNotify.bets:type_name -> message.LadderBetInfoNotify.BetsEntry
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OnlineNumNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HeartBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HeartBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GameStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TotalAmountChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NumberChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GameResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CompeteSettleDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SquidStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SquidSettleDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SquidJackpotNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SquidBetInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SquidPriceChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SquidRoundNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GlassStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GlassSettleDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*LadderStageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*LadderSettleDoneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*LadderBetInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RechargeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CloseConnNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientRequest_HeartBeatRequest)(nil),
	}
	file_message_proto_msgTypes[1].OneofWrappers = []any{
		(*ClientResponse_OnlineNumNotify)(nil),
		(*ClientResponse_HeartBeatResponse)(nil),
		(*ClientResponse_GameResultNotify)(nil),
		(*ClientResponse_TotalAmountChangeNotify)(nil),
		(*ClientResponse_NumberChangeNotify)(nil),
		(*ClientResponse_GameStageNotify)(nil),
		(*ClientResponse_CompeteSettleDoneNotify)(nil),
		(*ClientResponse_SquidStageNotify)(nil),
		(*ClientResponse_SquidSettleDoneNotify)(nil),
		(*ClientResponse_SquidJackpotNotify)(nil),
		(*ClientResponse_SquidBetInfoNotify)(nil),
		(*ClientResponse_SquidPriceChangeNotify)(nil),
		(*ClientResponse_SquidRoundNotify)(nil),
		(*ClientResponse_GlassStageNotify)(nil),
		(*ClientResponse_GlassSettleDoneNotify)(nil),
		(*ClientResponse_LadderStageNotify)(nil),
		(*ClientResponse_LadderSettleDoneNotify)(nil),
		(*ClientResponse_LadderBetInfoNotify)(nil),
		(*ClientResponse_RechargeNotify)(nil),
		(*ClientResponse_CloseConnNotify)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
