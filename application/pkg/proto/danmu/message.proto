syntax = "proto3";

option go_package = "message/";
option java_multiple_files = true;

package message;

enum MessageType {
  UNDEFINED = 0;
  OnlineNumNotify_         = 1;//在线数量变化
  HeartBeatRequest_        = 2;//心跳请求
  HeartBeatResponse_       = 3;//心跳返回

  GameResultNotify_        = 4;//结算
  TotalAmountChangeNotify_ = 5;//总金额发生变化通知
  NumberChangeNotify_      = 6;//成交量
  GameStageNotify_         = 7;//游戏状态切换
  CompeteSettleDoneNotify_ = 8;//结算完成

  SquidStageNotify_        = 9;//鱿鱼游戏状态切换
  SquidSettleDoneNotify_   = 10;//结算完成
  SquidJackpotNotify_      = 11;
  SquidBetInfoNotify_      = 12;//下注信息
  SquidPriceChangeNotify_  = 13;
  SquidRoundNotify_        = 14;

  GlassStageNotify_        = 15;//玻璃桥游戏状态切换
  GlassSettleDoneNotify_   = 16;//结算完成

  LadderStageNotify_        = 17;//梯子游戏状态切换
  LadderSettleDoneNotify_   = 18;//结算完成
  LadderBetInfoNotify_      = 19;//下注信息

  RechargeNotify_           = 20;//充值状态
  CloseConnNotify_          = 21;//断开客户端连接

  TradeRecordNotify_ = 22;//交易记录通知(每分钟成交的平均值)
  BuyOrderNotify_ = 23;//购买下单通知(增量)
  SellOrderNotify_ = 24;//出售下单通知(增量)
  BuyOrderListNotify_ = 25;//购买下单通知(全量) top 5 时间排序
  SellOrderListNotify_ = 26;//出售下单通知(全量) top 5 时间排序
  BuySuccessNotify_ = 27;//撮合购买成功通知
  SellSuccessNotify_ = 28;//撮合出售成功通知
  CloseMarketNotify_ = 29;//关闭市场通知
  OpenMarketNotify_ = 30;//开启市场通知
}

message ClientRequest{
  MessageType type = 2;
  oneof message {
    HeartBeatRequest heartBeatRequest = 1;
  }
}

message ClientResponse {
  int32 id = 1;
  MessageType type = 2;
  oneof message {
    OnlineNumNotify onlineNumNotify = 3;
    HeartBeatResponse heartBeatResponse = 4;

    GameResultNotify gameResultNotify = 5;
    TotalAmountChangeNotify totalAmountChangeNotify = 6;
    NumberChangeNotify numberChangeNotify = 7;
    GameStageNotify gameStageNotify = 8;
    CompeteSettleDoneNotify competeSettleDoneNotify = 9;

    SquidStageNotify squidStageNotify = 10;
    SquidSettleDoneNotify squidSettleDoneNotify = 11;
    SquidJackpotNotify squidJackpotNotify = 12;
    SquidBetInfoNotify squidBetInfoNotify = 13;
    SquidPriceChangeNotify squidPriceChangeNotify = 14;
    SquidRoundNotify squidRoundNotify = 15;

    GlassStageNotify glassStageNotify = 16;
    GlassSettleDoneNotify glassSettleDoneNotify = 17;

    LadderStageNotify ladderStageNotify = 18;
    LadderSettleDoneNotify ladderSettleDoneNotify = 19;
    LadderBetInfoNotify ladderBetInfoNotify = 20;

    RechargeNotify rechargeNotify = 21;
    CloseConnNotify closeConnNotify = 22;

    TradeRecordNotify tradeRecordNotify = 23;
    BuyOrderNotify buyOrderNotify = 24;
    SellOrderNotify sellOrderNotify = 25;
    BuyOrderListNotify buyOrderListNotify = 26;
    SellOrderListNotify sellOrderListNotify = 27;
    BuySuccessNotify buySuccessNotify = 28;
    SellSuccessNotify sellSuccessNotify = 29;
    CloseMarketNotify closeMarketNotify = 30;
    OpenMarketNotify openMarketNotify = 31;
  }
}

message OnlineNumNotify {
  int32 count = 1;
}

message HeartBeatRequest {
}
message HeartBeatResponse {
}

message GameStageNotify{
  int32 stage = 1;//0:开盘 1:封盘 2:结算
  int64 countdown = 2;
  int64 timestamp = 3;
}

message TotalAmountChangeNotify {
  map<string, int64> totalAmounts = 1;//k:up|down v:金额
  string type = 2;//下注类型
  string account = 3;//账号
}


message NumberChangeNotify {
  double num = 1;
  int64 timestamp = 2;
}

message GameResultNotify {
  //  int32 countdown = 1;//倒计时毫秒
  string winColor = 1;//a|peace|b
  int32 numA = 2;//0|1|2|..|9
  int32 numB = 3;//0|1|2|..|9
}

message CompeteSettleDoneNotify {
  int64 balance = 1;   //玩家当前余额
}

message SquidStageNotify {
  int32 stage = 1;    //0:开盘 1:封盘 2:结算
  int64 countdown = 2;
  int64 timestamp = 3;
  double transPrice = 4;
  int32 deadTrack = 5;//本次死亡赛道(仅封盘和结算)
}

message SquidSettleDoneNotify {
  int32 deadTrack = 1;  //本次死亡赛道
  double transPrice = 2;//交易价
  int64 bets = 3;   //本轮下注总额
  double odds = 4;      //赔率
  int64 bonus = 5;      //本轮奖金
  double jackpotWeightRate = 6;
  int32 nextRoundId = 7;
  int64 balance = 8;   //余额
}

message SquidJackpotNotify {
  int64 firstPass = 1;
  int64 jackpot = 2;
}

enum SquidBetInfoEnumType {
  OrderType        = 0;
  CancelType       = 1;
  SwitchType       = 2;
  RobotOrderType   = 3;
}
message SquidBetInfoNotify {
  int32    roundId          = 1;
  SquidBetInfoEnumType type = 2;
  repeated Track track      = 3;
}
message Track {
  int32 trackId = 1;//赛道ID
  int32 players = 2;//赛道人数
  int64 bets    = 3;//赛道投注总额
}

message SquidPriceChangeNotify {
  double num = 1;
  int64 timestamp = 2;
}

message SquidRoundNotify {
  repeated Round rounds = 1;
  int64    totalJackpot = 2;
}
message Round {
  int32 roundId = 1; //轮次ID
  double odds = 2;   //赔率
  int64 totalBet = 3;//本轮总注额
  int64 deadBet = 4; //本轮死亡注额
}

message GlassStageNotify {
  int32 stage = 1;    //0:开盘 1:封盘 2:结算
  int64 RoundNum =2;  //期数
  int64 countdown = 3;
  int64 timestamp = 4;
  string transHash = 5;
}

message GlassSettleDoneNotify {
  int64 RoundNum = 1;  //期数
  repeated Order orders = 2;
  int64 balance = 3;   //余额
}
message Order {
  string orderId = 1;
  bool isWin = 2;
  double odds = 3; //赔率
  double bonus = 4;//奖金
}

message LadderStageNotify {
  int32 stage = 1;    //0:开盘 1:封盘 2:结算
  int64 RoundNum =2;  //期数
  int64 countdown = 3;
  int64 timestamp = 4;
  string transHash = 5;
  map<string, int64> bets = 6; // 仅封盘和结算传
}

message LadderSettleDoneNotify {
  int64 RoundNum = 1;  //期数
  repeated Order orders = 2;
  int64 balance = 3;   //余额
}

message LadderBetInfoNotify {
  map<string, int64> bets = 1; // betId 和对应的下注总额
}

message RechargeNotify {
  string address = 1; //充值地址
  int64 balance  = 2; //当前游戏币余额
  int64 usdt     = 3;
  int64 voucher  = 4;
}

message CloseConnNotify {
}

message TradeRecordNotify {
  int64 timestamp = 1;
  int64 avgPrice = 2;
}

message BuyOrderNotify {
  BuyOrderInfo buyOrderInfo = 1;
}

message SellOrderNotify {
  SellOrderInfo sellOrderInfo = 1;
}

message BuyOrderInfo {
  string id = 1;
  int64 count = 2;
  int64 price = 3;
}

message SellOrderInfo {
  string id = 1;
  int64 count = 2;
  int64 price = 3;
}

message BuyOrderListNotify {
  repeated BuyOrderInfo buyOrderInfo = 1;
}

message SellOrderListNotify {
  repeated SellOrderInfo sellOrderInfo = 1;
}

message BuySuccessNotify {
  int64 count = 1;
  int64 price = 2;
  int64 voucher = 3;
  int64 balance = 4;
}

message SellSuccessNotify {
  int64 count = 1;
  int64 price = 2;
  int64 voucher = 3;
  int64 balance = 4;
}

message CloseMarketNotify {
}

message OpenMarketNotify {
  int64 closePrice = 1;
}